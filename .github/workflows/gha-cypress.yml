name: Cypress Tests on GH Actions
# This workflow will run Cypress tests on GitHub Actions and leverages GH Actions secrets for sensitive data.
# It will also generate a report and deploy it to GitHub Pages.
# parallelize the tests using multiple containers.
# This workflow is triggered manually and allows you to specify the environment, test specs, and tags.
# It uses the cypress-io/github-action to run the tests and the peaceiris/actions-gh-pages action to deploy the report.

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      specs:
        description: 'Test specs to run (comma-separated or "all")'
        required: true
        default: 'all'
        type: string
      tags:
        description: 'Tags to filter tests (comma-separated)'
        required: false
        default: ''
        type: string

jobs:
  cypress-tests:
    name: E2E Test Run
    # timeout-minutes: 15
    runs-on: ubuntu-22.04
    container:
      image: cypress/browsers:latest
      options: --user 1001
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cypress info
        run: npx cypress info

      - name: Node info
        run: node -v

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          record: true
          parallel: true
          group: "github-parallel-group"
          spec: ${{ github.event.inputs.specs == 'all' && 'cypress/e2e/**/*.cy.js' || github.event.inputs.specs }}
          tag: github,actions
        env:
          ENV: ${{ github.event.inputs.environment || 'production' }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Percy token
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          #LambdaTest SmartUI Token
          PROJECT_TOKEN: ${{ secrets.PROJECT_TOKEN }}
          # Pre-production authentication 
          CYPRESS_BASIC_AUTH_USERNAME: ${{ secrets.BASIC_AUTH_USERNAME }}
          CYPRESS_BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
          #Login info
          CYPRESS_USERNAME: ${{ secrets.USERNAME }}
          CYPRESS_PASSWORD: ${{ secrets.PASSWORD }}
          # Tags
          CYPRESS_grepTags: ${{ github.event.inputs.tags || '' }}
          # Tags to filter tests
          CYPRESS_grepOmitFiltered: true
          # Exclude SmartUI tests
          CYPRESS_excludeSpecPattern: "**/smart-ui-tests/**"

      - name: Create results directory if it doesn't exist
        if: ${{ always() }}
        run: mkdir -p cypress/results/json/container-${{ matrix.containers }}

      - name: Save results folder
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results-${{ matrix.containers }}
          path: cypress/results/json/container-${{ matrix.containers }}

  post-tests-results:
    runs-on: ubuntu-latest
    needs: cypress-tests
    if: ${{ always() }}
    steps: 
     - name: Checkout
       uses: actions/checkout@v4

     - name: Setup Node
       uses: actions/setup-node@v4
       with:
         node-version: 20
         cache: 'npm'

     - name: Install dependencies
       run: npm ci

     - name: Download all artifacts
       id: download
       continue-on-error: true
       uses: actions/download-artifact@v4
       with:
          path: downloaded-artifacts

     - name: Debug downloaded artifacts
       run: |
         echo "Downloaded artifacts structure:"
         find downloaded-artifacts -type f | sort

     - name: Prepare results directory
       run: |
         mkdir -p cypress/results/json
         # Copy all JSON files from all container directories to the main json directory
         find downloaded-artifacts -name "*.json" -exec cp {} cypress/results/json/ \; || echo "No JSON files found"
         echo "Contents of cypress/results/json:"
         ls -la cypress/results/json || echo "Directory is empty"
  
     - name: Create public directory
       run: mkdir -p public

     - name: Merge test results into one
       run: npm run report:merge || echo "No test results to merge"

     - name: Generate HTML report
       run: npm run report:generate || echo "No report to generate"

     - name: Create default report if no results
       if: ${{ failure() }}
       run: |
         echo "<html><body><h1>No test results available</h1><p>No test results were generated in this run.</p></body></html>" > public/index.html

     - name: Deploy report page
       if: ${{ always() }}
       uses: peaceiris/actions-gh-pages@v4
       with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
