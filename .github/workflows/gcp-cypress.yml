name: Cypress Tests on GCP

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      specs:
        description: 'Test specs to run (comma-separated or "all")'
        required: true
        default: 'all'
        type: string
      tags:
        description: 'Tags to filter tests (comma-separated)'
        required: false
        default: ''
        type: string
      parallel_machines:
        description: 'Number of parallel machines to use'
        required: true
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'

jobs:
  trigger-gcp-tests:
    name: Trigger GCP Cloud Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Define container indices up to 4 only
        container_idx: [1, 2, 3, 4]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true
          
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: cypress-example-e2e-397816

      # Skip this job if container_idx is greater than parallel_machines
      - name: Check if this container should run
        id: check-container
        run: |
          if [ ${{ matrix.container_idx }} -le ${{ github.event.inputs.parallel_machines }} ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Skipping container ${{ matrix.container_idx }} as it exceeds parallel_machines=${{ github.event.inputs.parallel_machines }}"
          fi

      - name: Trigger Cloud Build for Container ${{ matrix.container_idx }}
        id: cloud-build
        if: steps.check-container.outputs.should_run == 'true'
        run: |
          # Use GitHub run ID as the common build ID for all containers
          COMMON_BUILD_ID="${{ github.run_id }}"
          
          BUILD_ID=$(gcloud builds submit --config=cloudbuild.yaml \
            --no-source \
            --substitutions=_ENV=${{ github.event.inputs.environment }},_SPECS=${{ github.event.inputs.specs }},_CONTAINER_IDX=${{ matrix.container_idx }},_TOTAL_CONTAINERS=${{ github.event.inputs.parallel_machines }},_COMMON_BUILD_ID="$COMMON_BUILD_ID",_REPO_URL="${{ github.server_url }}/${{ github.repository }}.git",_BRANCH="${{ github.ref_name }}",_CYPRESS_RECORD_KEY="${{ secrets.CYPRESS_RECORD_KEY }}",_TAGS="${{ github.event.inputs.tags }}",_PERCY_TOKEN="${{ secrets.PERCY_TOKEN }}",_PROJECT_TOKEN="${{ secrets.PROJECT_TOKEN }}" \
            --async --format='value(id)')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          echo "Triggered Cloud Build for Container ${{ matrix.container_idx }} with ID: $BUILD_ID"

      - name: Wait for Cloud Build to complete
        if: steps.check-container.outputs.should_run == 'true'
        run: |
          gcloud components install beta --quiet
          gcloud beta builds log --quiet --stream ${{ steps.cloud-build.outputs.build_id }}

      - name: Download test results from GCS
        id: download-gcs
        if: steps.check-container.outputs.should_run == 'true'
        continue-on-error: true
        run: |
          mkdir -p cypress/results/json/container-${{ matrix.container_idx }}
          gsutil -m cp -r gs://cypress-example-e2e-results/${{ steps.cloud-build.outputs.build_id }}/* ./ || echo "No results found in GCS bucket"
          echo "GCS downloaded content for container ${{ matrix.container_idx }}:"
          find cypress/results -type f | sort

      - name: Save results folder
        if: steps.check-container.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results-${{ matrix.container_idx }}
          path: cypress/results/json

  post-tests-results:
    runs-on: ubuntu-latest
    needs: trigger-gcp-tests
    if: ${{ always() }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Debug downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          find downloaded-artifacts -type f | sort

      - name: Prepare results directory
        run: |
          mkdir -p cypress/results/json
          # Copy all JSON files from all container directories to the main json directory
          find downloaded-artifacts -name "*.json" -exec cp {} cypress/results/json/ \; || echo "No JSON files found"
          echo "Contents of cypress/results/json:"
          ls -la cypress/results/json || echo "Directory is empty"
  
      - name: Create public directory
        run: mkdir -p public

      - name: Merge test results into one
        run: npm run report:merge || echo "No test results to merge"

      - name: Generate HTML report
        run: npm run report:generate || echo "No report to generate"

      - name: Create default report if no results
        if: ${{ failure() }}
        run: |
          echo "<html><body><h1>No test results available</h1><p>No test results were generated in this run.</p></body></html>" > public/index.html

      - name: Deploy report page
        if: ${{ always() }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
